{"version":3,"sources":["components/button.js","App.js","serviceWorker.js","index.js"],"names":["Button","btnstyle","width","props","height","margin","fontSize","backgroundColor","orange","id","this","ops","className","style","onClick","label","calc","clear","clearOne","createStatement","key","Component","App","state","statement","result","mainCont","padding","marginTop","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingBottom","btnCont","display","justifyContent","flexWrap","handleChange","event","newStatement","target","value","setState","forceUpdate","cleanup","pop","console","log","statementElement","myStatement","join","eval","toString","split","type","onChange","paddingTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83bd95cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class Button extends Component {\n  btnstyle = {\n    width: this.props.width || \"24%\",\n    height: \"70px\",\n    margin: \"1px\",\n    fontSize: \"1.5rem\",\n    backgroundColor: this.props.orange || \"#6c757d\"\n  };\n\n  render() {\n    return (\n      <button\n        id={this.props.ops}\n        className=\"btn btn-secondary rounded-0\"\n        style={this.btnstyle}\n        onClick={\n          this.props.label === \"=\"\n            ? this.props.calc\n            : /* this.props.createStatement */\n            this.props.label === \"AC\"\n            ? this.props.clear\n            : this.props.label === \"C\" ? this.props.clearOne :\n            this.props.createStatement\n        }\n        key={this.props.label}\n      >\n        {this.props.label}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport Button from \"./components/button\";\n\nexport class App extends Component {\n  state = {\n    statement: [],\n    result: \"\"\n  };\n\n  mainCont = {\n    width: \"40%\",\n    padding: \"1px\",\n    marginTop: \"10%\",\n    borderRadius: \"10px\",\n    borderBottomLeftRadius: \"3px\",\n    borderBottomRightRadius: \"3px\",\n    paddingBottom: \"5px\"\n  };\n\n  btnCont = {\n    width: \"100%\",\n    padding: \"0px\",\n    margin: \"0px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\"\n  };\n\n  //enter data into text field by typing\n  handleChange = event => {\n    const statementElement = event.target.value;\n    const newStatement = [statementElement];\n    this.setState({ statement: newStatement });\n    this.forceUpdate();\n  };\n  cleanup = () => {\n    this.setState({ statement: [], result: \"\" });\n  };\n  clearOne = () => {\n    const newStatement = this.state.statement;\n    newStatement.pop();\n    this.setState({ statement: newStatement });\n    console.log(\"clearone\");\n  };\n  //push mathematical statement into statement array\n  createStatement = event => {\n    const statementElement = event.target.id;\n    const newStatement = [...this.state.statement, statementElement];\n    this.setState({ statement: newStatement });\n    this.forceUpdate();\n  };\n\n  //claculate the result\n  calc = () => {\n    const myStatement = this.state.statement.join(\"\");\n    // eslint-disable-next-line\n    const result = eval(myStatement);\n    const newStatement = result.toString().split(\"\");\n    this.setState({ result: result, statement: [...newStatement] });\n    console.log(\"calc\");\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <div style={this.mainCont} className=\"container bg-dark\">\n        <input\n          type=\"text\"\n          value={this.state.statement.join(\"\")}\n          onChange={this.handleChange}\n          className=\"form-control bg-dark text-white border-0 pl-4\"\n          style={{\n            fontSize: \"2rem\",\n            paddingTop: \"40px\",\n            paddingBottom: \"40px\",\n            marginTop: \"20px\",\n            marginBottom: \"20px\"\n          }}\n        />\n\n        <div style={this.btnCont}>\n          <Button\n            ops={\"\"}\n            label={\"AC\"}\n            createStatement={this.createStatement}\n            clear={this.cleanup}\n          />\n          <Button\n            ops={\"\"}\n            label={\"C\"}\n            createStatement={this.createStatement}\n            clearOne={this.clearOne}\n          />\n          <Button\n            ops={\"%\"}\n            label={\"%\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"/\"}\n            label={\"/\"}\n            createStatement={this.createStatement}\n            orange={\"#e07a3a\"}\n          />\n\n          <Button\n            ops={\"7\"}\n            label={\"7\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"8\"}\n            label={\"8\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"9\"}\n            label={\"9\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"*\"}\n            label={\"X\"}\n            createStatement={this.createStatement}\n            orange={\"#e07a3a\"}\n          />\n\n          <Button\n            ops={\"4\"}\n            label={\"4\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"5\"}\n            label={\"5\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"6\"}\n            label={\"6\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"-\"}\n            label={\"-\"}\n            createStatement={this.createStatement}\n            orange={\"#e07a3a\"}\n          />\n\n          <Button\n            ops={\"1\"}\n            label={\"1\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"2\"}\n            label={\"2\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"3\"}\n            label={\"3\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"+\"}\n            label={\"+\"}\n            createStatement={this.createStatement}\n            orange={\"#e07a3a\"}\n          />\n\n          <Button\n            ops={\"0\"}\n            label={\"0\"}\n            createStatement={this.createStatement}\n            width={\"48.5%\"}\n          />\n          <Button\n            ops={\".\"}\n            label={\".\"}\n            createStatement={this.createStatement}\n          />\n          <Button\n            ops={\"=\"}\n            label={\"=\"}\n            createStatement={this.createStatement}\n            orange={\"#e07a3a\"}\n            calc={this.calc}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}